openapi: 3.0.0
info:
  title: Users by OpenAPI
  description: Project created to show how to use OpenAPI
  version: 1.0.1
servers:
  - url: 'http://localhost:8080'
paths:
  /users:
    get:
      operationId: getAllUsers
      responses:
        200:
          description: "Return All users"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /books:
    get:
      operationId: getAllBooks
      responses:
        200:
          description: "Return All books"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
  /books/{title}:
    get:
      operationId: getOneBookByTitle
      parameters:
        - in: path
          name: title
          schema:
            type: string
      responses:
        200:
          description: "Return All books"
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/Book'
  /books/addNewBook:
    post:
      operationId: addOneBook
      requestBody:
        description: User book
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SwaggerBook'
      responses:
        200:
          description: "Add new user"
          content:
            application/json:
              schema:
                type: string
  /users/user/{username}:
    get:
      operationId: getOneUser
      parameters:
        - in: path
          name: username
          schema:
            type: string
      responses:
        200:
          description: "Return user by name"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        204:
          description: "User was not found"
  /users/login:
    post:
      operationId: login
      requestBody:
        description: User object (name, password)
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginUser'
      responses:
        200:
          description: "Return user by name and password"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        204:
          description: "User was not found"
  /users/addNewUser:
    post:
      operationId: addOneUser
      requestBody:
        description: User data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SwaggerUser'
      responses:
        200:
          description: "Add new user"
          content:
            application/json:
              schema:
                type: string
        409:
          description: "Conflict of users"
          content:
            application/json:
              schema:
                type: string
  /users/user/changeName:
    post:
      operationId: changeUserName
      requestBody:
        description: User name
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UsernameObject'
      responses:
        200:
          description: "Return user by name"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        409:
          description: "Conflict of users"
          content:
            application/json:
              schema:
                type: string
  /users/user/changePassword:
    post:
      operationId: changePassword
      requestBody:
        description: New password
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordObject'
      responses:
        200:
          description: "Return user by name after change password"
          content:
            application/json:
              schema:
                type: string
        409:
          description: "Conflict of passwords"
          content:
            application/json:
              schema:
                type: string
  /users/updateUser:
    put:
      operationId: updateUser
      requestBody:
        description: User data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SwaggerUser'
      responses:
        200:
          description: "Update existing user"
          content:
            application/json:
              schema:
                type: string
  /users/user/order:
    post:
      operationId: setNewOrder
      requestBody:
        description: new order from user
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserOrder'
      responses:
        200:
          description: "Update existing user with new order"
          content:
            application/json:
              schema:
                type: string
  /users/user/addNewAddress:
    post:
      operationId: setNewAddress
      requestBody:
        description: new address for user
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SwaggerAddress'
      responses:
        200:
          description: "Update existing user"
          content:
            application/json:
              schema:
                type: string
  /users/{userID}/getorders:
    get:
      operationId: getUserOrders
      parameters:
        - in: path
          name: userID
          schema:
            type: string
      responses:
        200:
          description: "return all orders of actually login user"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
  /users/{userID}/deleteaddress:
    post:
      operationId: deleteUserAddress
      parameters:
        - in: path
          name: userID
          schema:
            type: string
      responses:
        200:
          description: "delete actual address of user"
          content:
            application/json:
              schema:
                type: string



components:
  schemas:
    SwaggerBook:
      type: object
      required:
        - id
        - title
        - author
        - year
        - price
      properties:
        _id:
          type: number
        title:
          type: string
        author:
          type: string
        year:
          type: number
        price:
          type: number
    SwaggerUser:
      type: object
      required:
        - _id
        - username
        - password
      properties:
        _id:
          type: string
        username:
          type: string
        password:
          type: string
    LoginUser:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
        password:
          type: string
    UsernameObject:
      type: object
      required:
        - oldusername
        - newusername
      properties:
        oldusername:
          type: string
        newusername:
          type: string
    PasswordObject:
      type: object
      required:
        - username
        - newpassword
      properties:
        username:
          type: string
        newpassword:
          type: string
    SwaggerAddress:
      type: object
      required:
        - id
        - city
        - street
        - postalCode
      properties:
        id:
          type: string
        city:
          type: string
        street:
          type: string
        postalCode:
          type: string
    UserOrder:
      type: object
      required:
        - id
        - orderUser
        - orderAddress
        - orderDate
        - numOfItems
        - orderID
        - price
        - orderBookItems
      properties:
        id:
          type: string
        orderUser:
          $ref: '#/components/schemas/SwaggerOrderUser'
        orderAddress:
          $ref: '#/components/schemas/OrderAddress'
        orderDate:
          type: string
        numOfItems:
          type: number
        orderID:
          type: string
        price:
          type: number
        orderBookItems:
          type: array
          items:
            $ref: '#/components/schemas/SwaggerOrderBookItem'
    SwaggerOrderUser:
      type: object
      required:
        - name
        - surname
        - email
        - phoneNumber
      properties:
        name:
          type: string
        surname:
          type: string
        email:
          type: string
        phoneNumber:
          type: string
    OrderAddress:
      type: object
      required:
        - city
        - street
        - postalCode
      properties:
        city:
          type: string
        street:
          type: string
        postalCode:
          type: string
    SwaggerOrderBookItem:
      type: object
      required:
        - id
        - title
        - author
        - year
        - price
        - count
      properties:
        id:
          type: number
        title:
          type: string
        author:
          type: string
        year:
          type: number
        price:
          type: number
        count:
           type: number




  
